name: pytest

# Only build PRs, the master branch, and releases. Pushes to branches will only
# be built when a PR is opened. This avoids duplicated buids in PRs comming
# from branches in the origin repository (1 for PR and 1 for push).
on:
  pull_request:
  push:
    branches:
      - master
  release:
    types:
      - published

jobs:
  test:

    name: ${{ matrix.os }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      # Otherwise, the workflow would stop if a single job fails. We want to
      # run all of them to catch failures in different combinations.
      fail-fast: false
      matrix:
        os: [ubuntu, ]  # macos, windows]  # Only Linux currently.
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements-dev.txt
    - name: Test with pytest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pytest --cov=pyfftlog --flake8
        coveralls
    # - name: Coveralls Parallel
    #   # Hash corresponds to v1.1.2
    #   uses: coverallsapp/github-action@8cbef1dea373ebce56de0a14c68d6267baa10b44
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     path-to-lcov: coverage.xml
    #     flag-name: py-${{ matrix.python-version }}
    #     parallel: true

  # coveralls:
  #   needs: test
  #   name: Report to Coveralls
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Coveralls Finished
  #     # Hash corresponds to v1.1.2
  #     uses: coverallsapp/github-action@8cbef1dea373ebce56de0a14c68d6267baa10b44
  #     with:
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #       parallel-finished: true

  deploy:
    needs: test
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    # Only for releases and only from the origin repository, not forks
    if: github.event_name == 'release' && github.repository_owner == 'prisae'

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Need to fetch more than the last commit so that setuptools_scm can
        # create the correct version string. If the number of commits since
        # the last release is greater than this, the version will still be
        # wrong. Increase if necessary.
        fetch-depth: 100
        # The GitHub token is preserved by default but this job doesn't need
        # to be able to push to GitHub.
        persist-credentials: false

    # Need the tags so that setuptools_scm can form a valid version number
    - name: Fetch git tags
      run: git fetch origin 'refs/tags/*:refs/tags/*'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"

    - name: Build source and wheel distributions
      run: |
        pip install setuptools_scm scipy
        python setup.py install

    - name: Publish to Test PyPI
      if: success()
      # Hash corresponds to v1.4.1
      uses: pypa/gh-action-pypi-publish@54b39fb9371c0b3a6f9f14bb8a67394defc7a806
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_TOKEN}}
        repository_url: https://test.pypi.org/legacy/
        # Allow existing releases on test PyPI without errors.
        # NOT TO BE USED in PyPI!
        skip_existing: true

    - name: Publish to PyPI
      if: success()
      # Hash corresponds to v1.4.1
      uses: pypa/gh-action-pypi-publish@54b39fb9371c0b3a6f9f14bb8a67394defc7a806
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN}}
